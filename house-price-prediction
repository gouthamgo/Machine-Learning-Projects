# Step 1: Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.datasets import fetch_california_housing
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Step 2: Load the California Housing dataset
california = fetch_california_housing()
X = california.data
y = california.target

# Step 3: Create a DataFrame for better understanding
feature_names = california.feature_names
df = pd.DataFrame(X, columns=feature_names)
df['MedHouseVal'] = y

# Step 4: Exploratory Data Analysis
print(df.head())
print(df.describe())
print(df.isnull().sum())  # Check for missing values

# Step 5: Data Preprocessing
# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale the features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 6: Model Building
# Linear Regression
lr_model = LinearRegression()
lr_model.fit(X_train_scaled, y_train)
lr_pred = lr_model.predict(X_test_scaled)

# Random Forest (more accurate)
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
rf_model.fit(X_train_scaled, y_train)
rf_pred = rf_model.predict(X_test_scaled)

# Step 7: Model Evaluation
print("Linear Regression Results:")
print(f"MSE: {mean_squared_error(y_test, lr_pred):.4f}")
print(f"R² Score: {r2_score(y_test, lr_pred):.4f}")

print("\nRandom Forest Results:")
print(f"MSE: {mean_squared_error(y_test, rf_pred):.4f}")
print(f"R² Score: {r2_score(y_test, rf_pred):.4f}")

# Step 8: Visualize Results
plt.figure(figsize=(10, 6))
plt.scatter(y_test, rf_pred, alpha=0.5)
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Random Forest: Actual vs Predicted House Prices')
plt.show()

# Step 9: Feature Importance (for Random Forest)
feature_importance = pd.Series(rf_model.feature_importances_, index=feature_names)
feature_importance.sort_values(ascending=False).plot(kind='bar', figsize=(10, 6))
plt.title('Feature Importance for House Price Prediction')
plt.show()
